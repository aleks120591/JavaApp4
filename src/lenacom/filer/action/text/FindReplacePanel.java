package lenacom.filer.action.text;import lenacom.filer.component.*;import lenacom.filer.config.Colors;import lenacom.filer.config.XIcon;import lenacom.filer.config.History;import lenacom.filer.config.ResourceKey;import lenacom.filer.message.Errors;import lenacom.filer.message.Messages;import javax.swing.*;import javax.swing.text.BadLocationException;import javax.swing.text.DefaultHighlighter;import javax.swing.text.Highlighter;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;class FindReplacePanel extends JPanel implements ActionListener {    private FileDialog dlgFile;    private HistoryTextField tfFindText, tfReplaceText;    private JCheckBox chbMatchCase;    private JButton btnFindDown, btnFindUp, btnReplace, btnReplaceAll, btnClear, btnHide;    private Highlighter.HighlightPainter painter;    private Color color;    private int pos = -1;    FindReplacePanel(FileDialog dlgFile) {        this.dlgFile = dlgFile;        initComponents();        LabelComponentTablePanel pnlTextFields = new LabelComponentTablePanel();        pnlTextFields.addRow(new ResourceKey("dlg.file.lbl.find"), tfFindText, new ResourceKey("tooltip.special.chars.history"));        pnlTextFields.addRow(new ResourceKey("dlg.file.lbl.replace"), tfReplaceText, new ResourceKey("tooltip.special.chars.history"));        JPanel pnlLeftButtons = new HorizontalPanel(btnFindDown, btnFindUp, btnReplace, btnReplaceAll);        JPanel pnlRightButtons = new HorizontalPanel(btnClear, btnHide);        this.setLayout(new GridBagLayout());        GridBagConstraints constraints = new GridBagConstraints();        constraints.gridx = 0;        constraints.gridy = 0;        constraints.gridwidth = 2;        constraints.weightx = 1.0;        constraints.anchor = GridBagConstraints.NORTHWEST;        constraints.fill = GridBagConstraints.HORIZONTAL;        constraints.insets = new Insets(0, 0, 0, 0);        this.add(pnlTextFields, constraints);        constraints.gridy++;        constraints.fill = GridBagConstraints.NONE;        constraints.insets = new Insets(UIConstants.VERTICAL_GAP, 0, 0, 0);        this.add(chbMatchCase, constraints);        constraints.gridy++;        constraints.gridwidth = 1;        this.add(pnlLeftButtons, constraints);        constraints.gridx = 1;        constraints.weightx = 0;        constraints.insets = new Insets(UIConstants.VERTICAL_GAP, UIConstants.HORIZONTAL_GAP, 0, 0);        this.add(pnlRightButtons, constraints);        setVisible(false);    }    void setVisibleAsFind(String text) {        setVisibleAs(false);        tfFindText.setText(text);        find(false);    }    void setVisibleAsFind() {        setVisibleAs(false);    }    void setVisibleAsReplace() {        setVisibleAs(true);    }    private void setVisibleAs(boolean replace) {        tfReplaceText.setVisible(replace);        btnReplace.setVisible(replace);        btnReplaceAll.setVisible(replace);        setVisible(true);        tfFindText.requestFocus();    }    JButton getFindUpButton() {        return btnFindUp;    }    JButton getFindDownButton() {        return btnFindDown;    }    JButton getClearButton() {        return btnClear;    }    JButton getHideButton() {        return btnHide;    }    private void initComponents() {        btnFindDown = XButton.create("dlg.file.btn.find.down");        btnFindDown.addActionListener(this);        btnFindDown.setIcon(XIcon.DOWN.getIcon());        btnFindUp = XButton.create("dlg.file.btn.find.up");        btnFindUp.addActionListener(this);        btnFindUp.setIcon(XIcon.UP.getIcon());        btnReplace = XButton.create("dlg.file.btn.replace");        btnReplace.addActionListener(this);        btnReplaceAll = XButton.create("dlg.file.btn.replace.all");        btnReplaceAll.addActionListener(this);        btnClear = XButton.create("dlg.file.btn.clear");        btnClear.addActionListener(this);        btnClear.setIcon(XIcon.BROOM.getIcon());        btnHide = XButton.create("dlg.file.btn.hide");        btnHide.addActionListener(this);        btnHide.setIcon(XIcon.CLOSE.getIcon());        tfFindText = new ExtendedHistoryTextField(History.FIND_TEXT_HISTORY) {            @Override            protected void onEveryUpdate() {                enableButtons();            }        };        tfReplaceText = new ExtendedHistoryTextField(History.REPLACE_HISTORY) {            @Override            protected void onEveryUpdate() {                enableButtons();            }        };        chbMatchCase = new XCheckBox("dlg.file.lbl.match.case");    }    private void enableButtons() {        boolean findTextEmpty = tfFindText.getText().isEmpty();        btnFindDown.setEnabled(!findTextEmpty);        btnFindUp.setEnabled(!findTextEmpty);        if (tfReplaceText.isVisible()) {            boolean replaceTextEmpty = tfReplaceText.getText().isEmpty();            boolean enableReplace = !findTextEmpty && !replaceTextEmpty;            btnReplace.setEnabled(enableReplace);            btnReplaceAll.setEnabled(enableReplace);            btnClear.setEnabled(!findTextEmpty || !replaceTextEmpty);        } else {            btnClear.setEnabled(!findTextEmpty);        }    }    private void find(boolean reverse) {        FileArea fileArea = dlgFile.getFileArea();        String haystack = fileArea.getText();        String needle = tfFindText.getText();        //we need this checking because disabling of buttons may not work        if (needle.isEmpty()) return;        tfFindText.addHistoryItem(needle);        FindParameters params = new FindParameters();        params.setStart(fileArea.getCaretPosition());        params.setReverse(reverse);        params.setCaseSensitive(chbMatchCase.isSelected());        pos = Finder.find(haystack, needle, params);        if (pos != -1) {            fileArea.setCaretPosition(pos);            highlight(pos, needle.length());        }    }    private void highlight(int pos, int length) {        FileArea fileArea = dlgFile.getFileArea();        if (painter == null || !color.equals(Colors.getHighlightColor())) {            color = Colors.getHighlightColor();            painter = new DefaultHighlighter.DefaultHighlightPainter(color);        }        Highlighter highlighter = fileArea.getHighlighter();        highlighter.removeAllHighlights();        try {            highlighter.addHighlight(pos, pos + length, painter);        } catch (BadLocationException e) {            Errors.showError(dlgFile, e);        }    }    private void replace() {        if (pos == -1) find(false);        boolean found = true;        if (pos != -1) {            String needle = tfFindText.getText();            //we need this checking because disabling of buttons may not work            if (needle.isEmpty()) return;            tfFindText.addHistoryItem(needle);            String replacement = tfReplaceText.getText();            tfReplaceText.addHistoryItem(replacement);            try {                FileArea fileArea = dlgFile.getFileArea();                if (fileArea.replace(pos, needle, replacement, chbMatchCase.isSelected())) {                    highlight(pos, replacement.length());                    fileArea.setCaretPosition(pos + replacement.length());                } else {                    found = false;                }                pos = -1;            } catch (BadLocationException x) {                Errors.showError(dlgFile, x);            }        } else {            found = false;        }        if (!found) Messages.showMessage(dlgFile, "dlg.file.msg.not.found");    }    private void replaceAll() {        FileArea fileArea = dlgFile.getFileArea();        String haystack = fileArea.getText();        String needle = tfFindText.getText();        String replacement = tfReplaceText.getText();        //we need this checking because disabling of buttons may not work        if (needle.isEmpty() || replacement.isEmpty()) return;        FindParameters params = new FindParameters();        params.setStart(0);        params.setCyclical(false);        params.setCaseSensitive(chbMatchCase.isSelected());        int count = 0;        int pos = -1;        int firstFoundPos = -1;        do {            pos = Finder.find(haystack, needle, params);            if (pos == -1) {                break;            } else {                if (pos <= firstFoundPos) break;                if (firstFoundPos == -1) firstFoundPos = pos;                try {                    if (fileArea.replace(pos, needle, replacement, params.isCaseSensitive())) {                        count++;                        haystack = fileArea.getText();                    }                    params.setStart(pos + replacement.length());                } catch (BadLocationException x) {                    Errors.showError(dlgFile, x);                    break;                }            }        } while (true);        Messages.showMessage(dlgFile, "dlg.file.msg.replaced", count);    }    @Override    public void actionPerformed(ActionEvent e) {        Object source = e.getSource();        if (btnFindDown == source) {            find(false);        } else if (btnFindUp == source) {            find(true);        } else if (btnReplace == source) {            replace();        } else if (btnReplaceAll == source) {            this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));            try {                replaceAll();            } finally {                this.setCursor(Cursor.getDefaultCursor());            }        } else if (btnHide == source) {            this.setVisible(false);            dlgFile.getFileArea().getHighlighter().removeAllHighlights();        } else if (btnClear == source) {            tfFindText.setText("");            tfReplaceText.setText("");        }    }    void refresh() {        tfFindText.refresh();        tfReplaceText.refresh();        Highlighter.Highlight[] highlights = dlgFile.getFileArea().getHighlighter().getHighlights();        if (highlights.length > 0) {            int length = highlights[0].getEndOffset() - highlights[0].getStartOffset();            highlight(highlights[0].getStartOffset(), length);        }    }}